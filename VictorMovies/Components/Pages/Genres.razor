@page "/genres"
@using VictorMovies.Components.Domain
@using VictorMovies.Components.Services
@* Need to inject any services used as well *@
@inject IGenreService GenreService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Genres</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudPaper Elevation="4" Class="pa-6 ma-4">
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-space-between align-center">
                <MudText Typo="Typo.h3" Color="Color.Primary" Class="mb-4">Genres</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.MovieFilter"
                           Size="Size.Large" Class="ml-auto" OnClick="OpenCreateDialog">
                    New Genre
                </MudButton>
            </MudItem>

            <MudItem xs="12" Class="mb-4">
                <MudPaper Elevation="1" Class="pa-4">
                    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                        <MudTextField @bind-Value="searchString"
                                      Placeholder="Search genres..."
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      Immediate="true"
                                      DebounceInterval="300"
                                      Margin="Margin.Dense"
                                      OnBlurred="@(() => OnSearchChanged(searchString))"
                                      OnKeyUp="@((KeyboardEventArgs args) =>
                                                    {
                                                        if (args.Key == "Enter")
                                                        {
                                                            OnSearchChanged(searchString);
                                                        }
                                                    })" />

                        <MudButton Variant="Variant.Outlined" Color="Color.Default" Icon="@Icons.Material.Filled.Clear" OnClick="ClearSearch">
                            Clear
                        </MudButton>
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                @if (loading)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
                }
                else if (genres.Count == 0)
                {
                    <MudItem xs="12" Class="d-flex justify-center">
                        <MudPaper Class="pa-6 ma-4 text-center" Elevation="1" Style="min-width: 400px; max-width: 600px;">
                            <MudStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Spacing="2">
                                <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Secondary" Size="Size.Large" />
                                <MudText Typo="Typo.h6" Color="Color.Secondary">No genres found.</MudText>
                            </MudStack>
                        </MudPaper>
                    </MudItem>
                }
                else
                {
                    <MudDataGrid T="Genre" Items="@genres" Loading="@loading" Hover="true" Dense="false"
                                 Striped="false" Bordered="false" ReadOnly="true" Class="elevation-1">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6" Class="mud-primary-text">Amount of Genres (@genres.Count)</MudText>
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Property="x => x.GenreName" Title="Genre Name">
                                <CellTemplate>
                                    <MudStack Row="true" AlignItems="AlignItems.Center">
                                        <MudAvatar Color="Color.Secondary" Size="Size.Medium">
                                            @(context.Item.GenreName[0])
                                        </MudAvatar>
                                        <MudText>@context.Item.GenreName</MudText>
                                    </MudStack>
                                </CellTemplate>
                            </PropertyColumn>
                            <PropertyColumn Property="x => x.CreatedDate" Title="Joined" Format="MMM dd, yyyy HH:mm:ss" />
                            <TemplateColumn Title="Actions" TextAlignment="TextAlignment.Right">
                                <CellTemplate>
                                    <MudStack Row="true" Spacing="0" Class="pa-2">
                                        <div>
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary"
                                                           Size="Size.Small" Class="mx-1"
                                                           OnClick="@(() => OpenEditDialog(context.Item))" />
                                        </div>
                                        <div>
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                                           Size="Size.Small" Class="mx-1"
                                                           OnClick="@(() => OpenDeleteDialog(context.Item.GenreId))" />
                                        </div>
                                    </MudStack>
                                </CellTemplate>

                            </TemplateColumn>
                        </Columns>
                        <PagerContent>
                            <MudDataGridPager T="Genre" PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                        </PagerContent>
                    </MudDataGrid>
                }
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>


@code {
    private List<Genre> genres = new();
    private bool loading = true;
    private string searchString = string.Empty;

    
    //Load all Rows in table
    protected override async Task OnInitializedAsync()
    {
        await LoadGenres();
    }

    private async Task LoadGenres(string? searchNameValue = null)
    {
        try
        {
            loading = true;
            StateHasChanged();

            if (string.IsNullOrWhiteSpace(searchNameValue))
            {
                genres = (await GenreService.GetAllGenresAsync()).ToList();
            }
            else
            {
                genres = (await GenreService.GetGenreByNameAsync(searchNameValue)).ToList();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to load genres!", Severity.Error);
            Console.WriteLine("An error occured when trying to load genres: " + ex.Message);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }


    //Filter commands

    private async Task OnSearchChanged(string search)
    {
        await LoadGenres(search);
    }

    private async Task ClearSearch()
    {
        searchString = string.Empty;
        await LoadGenres(); // Load all genres again
    }


    @*  Create Dialog *@
    private async Task OpenCreateDialog()
    {
        var dialog = await DialogService.ShowAsync<CRUD___Genres.CreateGenre>("Add New Genre");
        var result = await dialog.Result;

        if (result != null)
        {
            if (!result.Canceled)
            {
                await LoadGenres();
                Snackbar.Add("Genre created successfully", Severity.Success);
            }
        }
        else
        {
            Snackbar.Add("Genre not found!", Severity.Error);
        }
    }

    @*  Edit Dialog *@
    private async Task OpenEditDialog(Genre genre)
    {
        var parameters = new DialogParameters
        {
            ["Genre"] = genre,
            ["Title"] = $"Edit Genre: {genre.GenreName}"
        };

        var dialog = await DialogService.ShowAsync<CRUD___Genres.EditGenre>("Edit Genre", parameters);
        var result = await dialog.Result;

        if (result != null)
        {
            if (!result.Canceled)
            {
                await LoadGenres();
                Snackbar.Add("Genre updated successfully", Severity.Success);
            }
        }
        else
        {
            Snackbar.Add("Genre not found!", Severity.Error);
        }
    }

    @* Delete Dialog  *@
    private async Task OpenDeleteDialog(int genreId)
    {
        var parameters = new DialogParameters
        {
            ["GenreId"] = genreId,
            ["Message"] = "Are you sure you want to delete this genre? This action cannot be undone."
        };

        var dialog = await DialogService.ShowAsync<CRUD___Genres.DeleteGenreConfirmation>("Confirm Deletion", parameters);
        var result = await dialog.Result;

        if (result != null)
        {
            if (!result.Canceled)
            {
                try
                {
                    await GenreService.DeleteGenreAsync(genreId);
                    await LoadGenres();
                    Snackbar.Add("Genre deleted successfully", Severity.Success);
                }
                catch (Exception)
                {
                    Snackbar.Add("Failed to delete genre", Severity.Error);
                }
            }
        }
        else
        {
            Snackbar.Add("Genre not found!", Severity.Error);
        }
    }
}
